"""autogenerated by genpy from outdoor_bot/mainTargets_serviceRequest.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class mainTargets_serviceRequest(genpy.Message):
  _md5sum = "90fff5866c31f9caf1d5f5e7d43f49c1"
  _type = "outdoor_bot/mainTargets_serviceRequest"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """string image_filename
float32 approxRange
bool firstTarget

"""
  __slots__ = ['image_filename','approxRange','firstTarget']
  _slot_types = ['string','float32','bool']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       image_filename,approxRange,firstTarget

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(mainTargets_serviceRequest, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.image_filename is None:
        self.image_filename = ''
      if self.approxRange is None:
        self.approxRange = 0.
      if self.firstTarget is None:
        self.firstTarget = False
    else:
      self.image_filename = ''
      self.approxRange = 0.
      self.firstTarget = False

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self.image_filename
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_fB.pack(_x.approxRange, _x.firstTarget))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(_x))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(_x))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.image_filename = str[start:end].decode('utf-8')
      else:
        self.image_filename = str[start:end]
      _x = self
      start = end
      end += 5
      (_x.approxRange, _x.firstTarget,) = _struct_fB.unpack(str[start:end])
      self.firstTarget = bool(self.firstTarget)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self.image_filename
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_fB.pack(_x.approxRange, _x.firstTarget))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(_x))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(_x))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.image_filename = str[start:end].decode('utf-8')
      else:
        self.image_filename = str[start:end]
      _x = self
      start = end
      end += 5
      (_x.approxRange, _x.firstTarget,) = _struct_fB.unpack(str[start:end])
      self.firstTarget = bool(self.firstTarget)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_fB = struct.Struct("<fB")
"""autogenerated by genpy from outdoor_bot/mainTargets_serviceResponse.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class mainTargets_serviceResponse(genpy.Message):
  _md5sum = "ad97e5b70d6ba7e0e2ab20f30606b30e"
  _type = "outdoor_bot/mainTargets_serviceResponse"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """int32 centerX
int32 centerY
int32 totalX
float32 rangeSquared
bool newImageReceived



"""
  __slots__ = ['centerX','centerY','totalX','rangeSquared','newImageReceived']
  _slot_types = ['int32','int32','int32','float32','bool']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       centerX,centerY,totalX,rangeSquared,newImageReceived

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(mainTargets_serviceResponse, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.centerX is None:
        self.centerX = 0
      if self.centerY is None:
        self.centerY = 0
      if self.totalX is None:
        self.totalX = 0
      if self.rangeSquared is None:
        self.rangeSquared = 0.
      if self.newImageReceived is None:
        self.newImageReceived = False
    else:
      self.centerX = 0
      self.centerY = 0
      self.totalX = 0
      self.rangeSquared = 0.
      self.newImageReceived = False

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_struct_3ifB.pack(_x.centerX, _x.centerY, _x.totalX, _x.rangeSquared, _x.newImageReceived))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(_x))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(_x))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      _x = self
      start = end
      end += 17
      (_x.centerX, _x.centerY, _x.totalX, _x.rangeSquared, _x.newImageReceived,) = _struct_3ifB.unpack(str[start:end])
      self.newImageReceived = bool(self.newImageReceived)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_struct_3ifB.pack(_x.centerX, _x.centerY, _x.totalX, _x.rangeSquared, _x.newImageReceived))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(_x))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(_x))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      _x = self
      start = end
      end += 17
      (_x.centerX, _x.centerY, _x.totalX, _x.rangeSquared, _x.newImageReceived,) = _struct_3ifB.unpack(str[start:end])
      self.newImageReceived = bool(self.newImageReceived)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_3ifB = struct.Struct("<3ifB")
class mainTargets_service(object):
  _type          = 'outdoor_bot/mainTargets_service'
  _md5sum = 'c13d1e488d3319a93b177757df961212'
  _request_class  = mainTargets_serviceRequest
  _response_class = mainTargets_serviceResponse
