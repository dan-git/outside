"""autogenerated by genpy from outdoor_bot/digcamsRequest.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class digcamsRequest(genpy.Message):
  _md5sum = "9a25221d333a5f1fe876e298f810c1e0"
  _type = "outdoor_bot/digcamsRequest"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """string command
string filename
int32 camera_number
float32 zoom
bool write_file

"""
  __slots__ = ['command','filename','camera_number','zoom','write_file']
  _slot_types = ['string','string','int32','float32','bool']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       command,filename,camera_number,zoom,write_file

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(digcamsRequest, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.command is None:
        self.command = ''
      if self.filename is None:
        self.filename = ''
      if self.camera_number is None:
        self.camera_number = 0
      if self.zoom is None:
        self.zoom = 0.
      if self.write_file is None:
        self.write_file = False
    else:
      self.command = ''
      self.filename = ''
      self.camera_number = 0
      self.zoom = 0.
      self.write_file = False

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self.command
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.filename
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_ifB.pack(_x.camera_number, _x.zoom, _x.write_file))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(_x))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(_x))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.command = str[start:end].decode('utf-8')
      else:
        self.command = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.filename = str[start:end].decode('utf-8')
      else:
        self.filename = str[start:end]
      _x = self
      start = end
      end += 9
      (_x.camera_number, _x.zoom, _x.write_file,) = _struct_ifB.unpack(str[start:end])
      self.write_file = bool(self.write_file)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self.command
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.filename
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_ifB.pack(_x.camera_number, _x.zoom, _x.write_file))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(_x))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(_x))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.command = str[start:end].decode('utf-8')
      else:
        self.command = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.filename = str[start:end].decode('utf-8')
      else:
        self.filename = str[start:end]
      _x = self
      start = end
      end += 9
      (_x.camera_number, _x.zoom, _x.write_file,) = _struct_ifB.unpack(str[start:end])
      self.write_file = bool(self.write_file)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_ifB = struct.Struct("<ifB")
"""autogenerated by genpy from outdoor_bot/digcamsResponse.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class digcamsResponse(genpy.Message):
  _md5sum = "6ed4b5a638436ae25b49ac666a6a3877"
  _type = "outdoor_bot/digcamsResponse"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """int32 captureResult
bool zoomResult
bool writeFileResult


"""
  __slots__ = ['captureResult','zoomResult','writeFileResult']
  _slot_types = ['int32','bool','bool']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       captureResult,zoomResult,writeFileResult

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(digcamsResponse, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.captureResult is None:
        self.captureResult = 0
      if self.zoomResult is None:
        self.zoomResult = False
      if self.writeFileResult is None:
        self.writeFileResult = False
    else:
      self.captureResult = 0
      self.zoomResult = False
      self.writeFileResult = False

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_struct_i2B.pack(_x.captureResult, _x.zoomResult, _x.writeFileResult))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(_x))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(_x))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      _x = self
      start = end
      end += 6
      (_x.captureResult, _x.zoomResult, _x.writeFileResult,) = _struct_i2B.unpack(str[start:end])
      self.zoomResult = bool(self.zoomResult)
      self.writeFileResult = bool(self.writeFileResult)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_struct_i2B.pack(_x.captureResult, _x.zoomResult, _x.writeFileResult))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(_x))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(_x))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      _x = self
      start = end
      end += 6
      (_x.captureResult, _x.zoomResult, _x.writeFileResult,) = _struct_i2B.unpack(str[start:end])
      self.zoomResult = bool(self.zoomResult)
      self.writeFileResult = bool(self.writeFileResult)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_i2B = struct.Struct("<i2B")
class digcams(object):
  _type          = 'outdoor_bot/digcams'
  _md5sum = '29c405e0eb1d6a40d9812e9c1ae2905f'
  _request_class  = digcamsRequest
  _response_class = digcamsResponse
